import os
import sys
import pikepdf
import subprocess
import platform
import blessed
import re
from time import sleep
from PIL import Image
from tqdm import tqdm
from colorama import Fore, Back, Style, init
from PyPDF2 import PdfMerger, PdfReader, PdfWriter

init(autoreset=True)
#Constants declearation
output_folder = "output/"
input_folder = "input/"
MERGE = "MERGE PDF"
COMPRESS = "COMPRESS PDF"
SPLIT = "SPLIT PDF"
CONVERT = "CONVERT TO PDF"
error = False

def clear_console(name_print = True):
    if platform.system() == "Windows":
        os.system("cls")
    else:
        os.system("clear")
    if name_print:
        print(Back.BLUE + "PDFify v1.0")

def check_folders():
    if not os.path.exists(input_folder):
        os.makedirs(input_folder)
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

def rewrite_console_line(position):
    for b in range(term.get_location()[0] - position):
        sys.stdout.write("\033[F\033[K")

def shorten_filename(filename, max_length=12):
    name, ext = os.path.splitext(filename)
    if len(name) > max_length - len(ext) - 3:
        return name[:max_length - len(ext) - 3] + "..." + ext
    return filename


def parse_to_numbers(input_string):
    pattern = r'(\d+)(?:-(\d+))?'
    numbers = []
    matches = re.findall(pattern, input_string)
    for match in matches:
        start = int(match[0])
        end = int(match[1]) if match[1] else start
        numbers.extend(range(start, end + 1))
    return numbers

def docx_to_pdf(input_path, input_dir):
    output_pdf = os.path.join(input_dir, os.path.basename(input_path).replace(".docx", ".pdf"))
    subprocess.run(["libreoffice", "--headless", "--convert-to", "pdf", input_path, "--outdir", input_dir],stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL)
    return output_pdf

def ppt_to_pdf(input_path, output_dir):
    output_pdf = os.path.join(output_dir, os.path.basename(input_path).replace(".pptx", ".pdf"))
    subprocess.run(["libreoffice", "--headless", "--convert-to", "pdf", input_path, "--outdir", output_dir],stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL)
    return output_pdf

def image_to_pdf(input_path, output_dir):
    img = Image.open(input_path)
    output_pdf = os.path.join(output_dir, os.path.basename(input_path).rsplit('.', 1)[0] + ".pdf")
    img.convert('RGB').save(output_pdf)
    return output_pdf

def compress_pdf(input_pdf):
    compressed_pdf = os.path.join(output_folder, "compressed_" + os.path.basename(input_pdf))
    with pikepdf.open(input_pdf) as pdf:
        pdf.save(compressed_pdf)
    return compressed_pdf

def compress_pdfs(input_pdf):
    with tqdm(total=len(input_pdf), desc="Compressing PDFs") as progress_bar:
        for file in input_pdf:
            compressed_pdf = os.path.join(output_folder, "compressed_" + os.path.basename(file))
            with pikepdf.open(input_folder + file) as pdf:
                pdf.save(compressed_pdf)
                progress_bar.update(1)

def merge_pdfs(file_paths, output_pdf):
    merger = PdfMerger()
    output_path = os.path.join(output_folder, "merged_output.pdf")
    with tqdm(total=len(file_paths), desc="Merging PDFs") as progress_bar:
        for path in file_paths:
            merger.append(os.path.join(input_folder,path))
            progress_bar.update(1)
        merger.write(output_path)
        merger.close()
        compress_pdf(output_path)
        os.remove(output_path)

def split_pdf(input_path, start_page, end_page, output_path):
    reader = PdfReader(input_path)
    writer = PdfWriter()
    for j in range(start_page, end_page + 1):
        writer.add_page(reader.pages[j])
    with open(output_path, "wb") as f:
        writer.write(f)

def convert_and_compress_folder(folder_path, output_dir):
    files = os.listdir(folder_path)
    total_files = len(files)

    with tqdm(total=total_files, desc="Processing files") as main_bar:
        for filename in files:
            file_path = os.path.join(folder_path, filename)
            name, ext = os.path.splitext(filename)
            short_name = shorten_filename(filename)
            if ext.lower() == '.docx':
                with tqdm(total=2, desc=f"Converting {short_name}", leave=False) as sub_bar:
                    pdf_path = docx_to_pdf(file_path, output_dir)
                    sub_bar.update(1)
                    compress_pdf(pdf_path)
                    sub_bar.update(1)
                    os.remove(pdf_path)

            elif ext.lower() == '.pptx':
                with tqdm(total=2, desc=f"Converting {short_name}", leave=False) as sub_bar:
                    pdf_path = ppt_to_pdf(file_path, output_dir)
                    sub_bar.update(1)
                    compress_pdf(pdf_path)
                    sub_bar.update(1)
                    os.remove(pdf_path)

            elif ext.lower() in ['.jpg', '.jpeg', '.png']:
                with tqdm(total=2, desc=f"Converting {short_name}", leave=False) as sub_bar:
                    pdf_path = image_to_pdf(file_path, output_dir)
                    sub_bar.update(1)
                    compress_pdf(pdf_path)
                    sub_bar.update(1)
                    os.remove(pdf_path)

            else:
                print(f"Skipping unsupported file format: {filename}")

            main_bar.update(1)
def user_interaction(option):
    user_input = ""
    split_pdf1 = "0"
    merge_all_pdf = "n"
    compress_all_pdf = "n"
    allowed_types = {"docx","ppt","jpg","jpeg","png"}
    
    while True:
        clear_console()
        
        if option == CONVERT:
            list_of_files = [file for file in os.listdir(input_folder) if is.path.splitext(file)[1].lower() in allowed_types]
        else:
            list_of_files = [file for file in os.listdir(input_folder) if file.endswith(".pdf")]
            
        for k, file in enumerate(list_of_files, start=1):
            print(f"{k}. {shorten_filename(file, 50)}")
        if option == "M":
            merge_all_pdf = input("Merge all pdf [y/N]: ").lower()
        elif option == "C":
            compress_all_pdf = input("Compress all pdf [y/N]: ").lower()
        elif option == "S":
            split_pdf1 = input("Select a pdf to proceed: ").lower()
        line = term.get_location()[0]
        while True:
            if option == "M":
                user_input = input("Order of pdf to merge comma seperated: ").strip()
            elif option == "C":
                user_input = input("List of pdf to compress comma seperated: ").strip()
            try :
                indexes = [int(index.strip()) for index in user_input.split(",")]
                if any(a < 0 or a >= len(list_of_pdfs) for a in indexes):
                    print("Invalid index. Please provide valid indexes within the array range.")
                    sleep(3)
                    rewrite_console_line(line)
                else:
                    break
            except ValueError:
                print("Invalid input. Please enter only integers separated by commas.")
                sleep(3)
                rewrite_console_line(line)
        if option == "M":
            if not merge_all_pdf == "n":
                sorted_merge_list = [list_of_pdfs[i-1] for i in indexes]
                remaining_indexes = [i for i in range(len(list_of_pdfs)) if i not in indexes]
                sorted_merge_list.extend([list_of_pdfs[i-1] for i in remaining_indexes])
                merge_pdfs(sorted_merge_list, "merged_output.pdf")
                user_input = input("Do you want to merge any other files [y/N]: ").lower()
                if user_input == "n":
                    break
            else:
                sorted_merge_list = [list_of_pdfs[a-1] for a in indexes]
                merge_pdfs(sorted_merge_list, os.path.join(output_folder, "merged_output.pdf"))
        elif option == "C":
            if not compress_all_pdf == "n":
                compress_pdf_list = [list_of_pdfs[i-1] for i in indexes]
            else:
                compress_pdf_list = list_of_pdfs
            compress_pdfs(compress_pdf_list)
##################
## Main Program ##
##################
if __name__ == "__main__":
    term = blessed.Terminal()
    try:
        check_folders()
        while True:
            clear_console()
            print(Fore.YELLOW + "1 - Convert all to pdf\n2 - Merge pdf\n3 - Compress pdf\n4 - Split pdf\nq - Quit")
            action = input("Choose an option to start: ")
            clear_console()
            if action == "1":
                convert_and_compress_folder(input_folder, output_folder)
            elif action == "2":
                user_interaction("M")
            elif action == "3":
               user_interaction("C")
            elif action == "4":
                while True:
                    clear_console
                    list_of_pdfs = [file for file in os.listdir(input_folder) if file.endswith(".pdf")]
                    for k, file in enumerate(list_of_pdfs, start=1):
                        print(f"{k}. {shorten_filename(file, 50)}")
                    pdf_num = input("Select a pdf to proceed: ")
                
                
                split_pdf(input_folder + "NAUKRI_MELVIN_RIJOHN_T_(2).pdf", 0, 0, os.path.join(output_folder, "split_output.pdf"))
            elif action == "q":
                print(Fore.RED + "Quitting...")
                sleep(3)
                clear_console(False)
                exit()
            else:
                print("Invalid option. Try again.")

            sleep(2)
    except KeyboardInterrupt:
        clear_console()
        print(Fore.RED + Style.BRIGHT + "SIGINT detected. Quitting...")
        sleep(1)
        clear_console(False)
        
        
from pypdf import PdfReader, PdfWriter
import os
import re


def split_pdf(input_path: str, split_type: str, pages_or_groups=None) -> None:
    reader = PdfReader(input_path)
    base_name = os.path.splitext(os.path.basename(input_path))[0]
    output_dir = os.path.dirname(input_path) or "."

    if split_type == "list":
        # Split into two PDFs based on user-specified pages
        specified_pages = set(pages_or_groups or [])
        writers = [PdfWriter(), PdfWriter()]

        for i, page in enumerate(reader.pages):
            writers[0 if i in specified_pages else 1].add_page(page)

        for idx, writer in enumerate(writers, start=1):
            output_path = os.path.join(output_dir, f"{base_name}_part{idx}.pdf")
            with open(output_path, "wb") as f:
                writer.write(f)

    elif split_type == "groups":
        # Split into multiple PDFs based on number of groups
        num_groups = pages_or_groups if isinstance(pages_or_groups, int) else 1
        pages_per_group = len(reader.pages) // num_groups

        for group in range(num_groups):
            writer = PdfWriter()
            start_page = group * pages_per_group
            end_page = len(reader.pages) if group == num_groups - 1 else start_page + pages_per_group

            for i in range(start_page, end_page):
                writer.add_page(reader.pages[i])

            output_path = os.path.join(output_dir, f"{base_name}_group{group + 1}.pdf")
            with open(output_path, "wb") as f:
                writer.write(f)

    elif split_type == "ranges":
        # Split into individual PDFs based on user-specified ranges
        specified_pages = set()
        if isinstance(pages_or_groups, str):
            matches = re.findall(r"(\d+)(?:-(\d+))?", pages_or_groups)
            for match in matches:
                start = int(match[0]) - 1  # Convert to zero-based index
                end = int(match[1]) - 1 if match[1] else start
                specified_pages.update(range(start, end + 1))

        for page_number in specified_pages:
            if 0 <= page_number < len(reader.pages):
                writer = PdfWriter()
                writer.add_page(reader.pages[page_number])
                output_path = os.path.join(output_dir, f"{base_name}_page{page_number + 1}.pdf")
                with open(output_path, "wb") as f:
                    writer.write(f)
    else:
        raise ValueError("Invalid split_type. Use 'list', 'groups', or 'ranges'.")